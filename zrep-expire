#!/usr/bin/python3

from datetime import datetime, timedelta
import subprocess
import parsedatetime as pdt     # apt install python3-parsedatetime
import sys
import argparse
import re
from pprint import pprint,pformat

# This program calls the 'zfs' utility to gather information. The output of the command is decoded
# as UTF-8. If your system locale doesn't use UTF-8 encoding, change the 'get_all_filesystems'
# and 'get_all_snapshots' functions as needed.

rules = [
#    MAX_AGE  : MIN_INTERVAL
    '1 hour   : 1 minute',
    '12 hours : 5 minutes',
    '8 days   : 1 hour',
    '32 days  : 1 day',
    '1 year   : 1 week',
    '5 years  : 1 month'
]

created_fmt = '%a %b %d %H:%M %Y'

class ContinueLoop(Exception):
    pass

def verbose(str):
    if options.verbose or options.debug or options.noop:
        print(datetime.now().strftime("%Y-%m-%d %H:%M:%S") + ' ' + str)

def debug(str):
    if options.debug or options.noop:
        print(datetime.now().strftime("%Y-%m-%d %H:%M:%S") + ' ' + str)

def process_options ():
    parser = argparse.ArgumentParser(description='Zrep snapshot expiration tool',
        formatter_class=lambda prog: argparse.ArgumentDefaultsHelpFormatter(prog, max_help_position=38, width=120))
    parser.add_argument('-c', '--config', action='store', dest='config', default=None, help='path to configuration file')
    parser.add_argument('-k', '--keep', action='store', dest='keep', type=int, default=5, help='keep the last n snapshots')
    parser.add_argument('-v', '--verbose', action='store_true', dest='verbose', help='output verbose information')
    parser.add_argument('-d', '--debug', action='store_true', dest='debug', help='output even more verbose information')
    parser.add_argument('-n', '--noop', action='store_true', dest='noop', help='list snapshots and results but do not act')
    parser.add_argument('-a', '--all', action='store_true', dest='allfs', help='act on all ZFS filesystems')
    parser.add_argument('--zrep-ignore', action='store_true', dest='zrepignore', help='act on all snapshots, not just zrep')
    parser.add_argument('-t', '--tags', action='store', dest='tags', default='zrep', help='comma-separated list of zreptags to act on')
    parser.add_argument('filesystem', nargs='*', default=None, help='the filesystem(s) to act on')
    args = parser.parse_args()
    return args

def parse_rules(therules):
    parsed_rules = []
    for r in therules:
        # Ignore comments
        if r.strip()[0] == '#':
            continue
        items = r.split(':',2)
        period = items[0].strip()
        interval = re.sub('#.*', '', items[1]).strip()

        num0, unit0 = period.split(None, 2)
        num1, unit1 = interval.split(None, 2)
        try:
            p0 = cal.parseDT('-' + period)[0]
            i0 = cal.parseDT(interval, sourceTime=datetime.min)[0] - datetime.min
        except TypeError as e:
            print(e)
            continue

        rule = ( p0, i0 )
        parsed_rules.append(rule)

    # Sort the rules so the longest retention comes first
    parsed_rules.sort(key=lambda tup: tup[0])
    return parsed_rules

def get_all_filesystems():
    cmd = [ '/sbin/zfs', 'list', '-H', '-t', 'filesystem', '-o', 'name' ]
    try:
        filesystems = subprocess.check_output(cmd).decode('utf-8').split("\n")
        filesystems = sorted(filter(lambda x: len( x ) > 0, ( line.strip() for line in filesystems ) ))
        return filesystems
    except subprocess.CalledProcessError as e:
        sys.exit(1)

def get_all_snapshots(fs, keep, tag, zrepignore=False):
    cmd = [ '/sbin/zfs', 'list', '-H', '-t', 'snapshot', '-o', 'name,%s:sent,creation' % tag, '-s', 'creation', '-d', '1', '-r', fs ]
    try:
        snapshots = subprocess.check_output(cmd).decode('utf-8').split("\n")
        snapshots = list(filter(lambda x: len( x ) > 0, ( line.strip() for line in snapshots ) ))[0:-keep]
        n0 = len(snapshots)
        debug('Considering %d snapshots of %s for expiry' % (n0, fs))
        if n0 > 0 and zrepignore is False:
            regexpstr = '.*@%s_[0-9a-f]{6}' % tag
            regexp = re.compile(regexpstr)
            snapshots = list(filter(regexp.match, snapshots))
            n1 = len(snapshots)
            debug('Ignoring %d snapshots due to tag mismatch' % (n0 - n1))
        return snapshots
    except subprocess.CalledProcessError as e:
        sys.exit(1)

    # Strip whitespace, remove empty lines and the last <keep> snapshots from the list
    # Also, filter by tags

def expire(snapshot):
    if not options.noop:
        cmd = [ '/sbin/zfs', 'destroy', snapshot ]
        ret = subprocess.call( cmd )
        if ret != 0:
            print("Error expiring %s, status was %d" % (snapshot, ret))

def human_delta(delta):
    days = delta.days
    seconds = delta.seconds
    hours = int(seconds / 3600)
    seconds = seconds % 3600
    minutes = int(seconds / 60)
    seconds = seconds % 60
    return "%d+%d:%02d:%02d" % (days,hours,minutes,seconds)

continue_loop = ContinueLoop()
cal = pdt.Calendar()

options = process_options()
config = options.config
if config is not None:
    try:
        with open(config) as f:
            rules = f.readlines()
    except IOError as e:
        print(e)
        sys.exit(1)

parsed_rules = parse_rules(rules)

keep = options.keep
if keep < 1:
    keep = 1

filesystems = options.filesystem
if options.allfs:
    filesystems = get_all_filesystems()

tags = options.tags.split(',')

for fs in filesystems:
    for tag in tags:

        snapshots = get_all_snapshots(fs, keep, tag, options.zrepignore)
        n = len(snapshots)

        last_kept = None

        for i, line in enumerate(snapshots):
            fields = line.split(None, 2)
            snapname = fields[0]
            zrepsent = fields[1]
            created = datetime.strptime( fields[2], created_fmt )
            created_str = created.strftime('%Y-%m-%d %H:%M:%S')

            if last_kept is not None:
                last_kept_str = last_kept.strftime('%Y-%m-%d %H:%M:%S')

            # Don't expire snapshots that have not been replicated. Only set last_kept if it has been set
            # before, so an unreplicated snapshot cannot count as the oldest one.
            if zrepsent == '-' and options.zrepignore is False:
                verbose('Snapshot: %s, created: %s, has not been replicated anywhere => KEEPING' % (snapname, created))
                if last_kept is not None:
                    last_kept = created
                continue

            # Is snapshot older than longest retention?
            if created < parsed_rules[0][0]:
                verbose("Snapshot: %s, created: %s, oldest backup must be created after %s => EXPIRING" % (snapname,
                    created_str, parsed_rules[0][0].strftime('%Y-%m-%d %H:%M:%S')))
                expire(snapname)
                continue

            # Snapshot is eligible for keeping. Keep the oldest backup.
            if last_kept is None:
                debug("Snapshot: %s, created: %s, it is the first one => KEEPING" % (snapname, created_str))
                last_kept = created
                continue

            # From this point we can assume that last_kept is set

            last_interval = parsed_rules[0][1]
            delta = created - last_kept

            try:
                for r in parsed_rules:

                    msg = "Snapshot: %s, created: %s, last kept: %s, delta: %s, interval: %s => %%s" % (snapname,
                        created_str, last_kept_str, human_delta(delta), human_delta(last_interval))

                    if created < r[0]:
                        # The snapshot is older than the current rule handles. Use interval of the previous rule.
                        if delta < last_interval:
                            verbose(msg % 'EXPIRING')
                            expire(snapname)
                        else:
                            debug(msg % 'KEEPING')
                            last_kept = created

                        # Break the parsed_rules loop and continue the snapshots loop
                        raise continue_loop

                    last_interval = r[1]

            except ContinueLoop:
                continue

            # The snapshot is young enough for the most recent category. Use the current interval for expiry.
            msg = "Snapshot: %s, created: %s, last kept: %s, delta: %s, interval: %s => %%s" % (snapname,
                created_str, last_kept_str, human_delta(delta), human_delta(last_interval))

            if delta < last_interval:
                verbose(msg % 'EXPIRING')
                expire(snapname)
            else:
                debug(msg % 'KEEPING')
                last_kept = created

